# Convert a MDB file (Access) to SQL
# Needs mdbtools[http://mdbtools.sourceforge.net/]
# Created by √Ålvaro Justen <https://github.com/turicas>
# License: GPLv2
# https://gist.github.com/turicas/2592877

mdb="$1"
sql="$2"

if [ -z "$2" ]; then
    echo 'This script convert a MDB file to SQL file. You need to specify the name of both'
    echo "Usage: ${0} <mdb_file> <sql_file>"
    exit 1
fi

if [ -z "$(which mdb-tables)" ]; then
    echo 'The dependency "mdbtools" is not available.'
    echo 'Learn more at http://mdbtools.sourceforge.net/'
    exit 2
fi

# Database options: access, sybase, oracle, postgres, mysql, sqlite
# The default database option is 'access'.

# Postgres
mdb-schema "${mdb}" postgres > "${sql}"
# MySql
# mdb-schema "${mdb}" mysql > $sql

sed -i 's/Long Integer/INT(11)/g; s/Text /VARCHAR/g' "${sql}"
for table in $(mdb-tables "${mdb}"); do
    # Postgres
    mdb-export -I postgres "${mdb}" "${table}" >> "${sql}"
    # MySql
    # mdb-export -I mysql "${mdb}" "${table}" >> "${sql}"
    #
    # The `-I` (--insert) option for `mdb-export`:
    # # backend INSERT statements (instead of CSV).
    # You must specify which SQL backend dialect to use.
    # Allowed values are: access, sybase, oracle, postgres, mysql and sqlite.
done
sed -i '/^-\{2,\}/d; s/DROP TABLE /DROP TABLE IF EXISTS /' "${sql}"
