{ pkgs }:
''
filetype indent plugin on
" syntax on " This is related to `syntax enable`, but it overrules my color/highlight settings.
syntax enable " Equivalent to ':source $VIMRUNTIME/syntax/syntax.vim'

let mapleader = ","

let myConfigDir = expand('$VOLATILE_CONFIG/$USER/vim')
let mySpellDir = myConfigDir . '/spellDir'

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set backupcopy=auto
set breakindent
set colorcolumn=80,115
set complete=.,w,b,u,t
set completeopt=menu,preview
" `&directory` is the list of dir names for swap files.
" The default value of `&directory` is '.,~/tmp,/var/tmp,/tmp'.
" A double slash ensures swapfile-name uniqueness.
set directory=/var/tmp//,/tmp//
set display=truncate,uhex
set encoding=utf-8
set expandtab
set foldclose=all
set foldopen=hor,undo
set formatoptions=tcqj
set hidden
set history=1000
set hlsearch
set laststatus=2
set lazyredraw
set linebreak
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set matchpairs=(:),[:],{:},<:>
set modeline
set mouse=
set nobackup " Do not persist backup after successful write. Cf. writebackup
set nocompatible
set nocursorcolumn
set nocursorline
set noincsearch
set nojoinspaces
set novisualbell
set nrformats=bin,hex
set number
set omnifunc=syntaxcomplete#Complete
set relativenumber
set ruler
set scrolloff=0
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal
set shiftround
set shiftwidth=2
set showbreak=â†ª
set showmatch
set sidescrolloff=0
set smarttab
" setlocal spell
let &spellfile = mySpellDir . '/mh.utf-8.add'
  let &spellfile .= ',' . mySpellDir . '/purs.utf-8.add'
set spelllang=en_us
set statusline=[%n]\ [%t]
  set statusline+=%=            " separation point btw left- and right-aligned
  set statusline+=[%l\/%L,\ %c%V]
set swapfile
set suffixesadd=.c,.cs,.hs,.java,.js,.json,.md,.py,.purs,.txt
set t_Co=16
set tabpagemax=50
set tabstop=2
setglobal tags=./tags
set ttimeout
set ttimeoutlen=100
set viminfo=!,'100,<50,s10,h
let &viminfofile = myConfigDir . '/info'
set virtualedit=all

set wildmenu " Enhanced commandline completion.
set wildmode=longest:list,list:full " Commandline completion mode.
" wildoptions
"     `wildoptions=pum` doesn't work with `wildmode=list`.
"     `wildoptions=fuzzy` doesn't work well with `wildmode=list`.

set writebackup " Protect against crash-during-write. Might affect 'inotify'.
set wrap

nmap = <Plug>VinegarSplitUp
" The pipe character must be escaped.
nmap \| <Plug>VinegarVerticalSplitUp

imap <C-C> <Esc>g=iW
nmap <C-C> g=iW
vmap <C-C> g=iW

noremap <C-H> <C-W>h
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-L> <C-W>l
noremap <leader>/ :Commentary<cr>
cnoremap w!! %!sudo tee > /dev/null %
inoremap <C-A> <Esc>I
inoremap <C-E> <Esc>A
inoremap jk <Esc>
inoremap kj <Esc>
inoremap <C-L> <C-G>u<Esc>[s1z=`]a<C-G>u
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
inoremap <silent> <Space> <C-R>=UltiSnips#ExpandSnippetOrJump() ? ''' : ' '<CR>
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap Q @q
nnoremap <leader>p "+
nnoremap <leader>tl :ToggleLogograms<CR>
nnoremap <leader>y "+y
nnoremap <leader>Y "+y$
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
nnoremap ## :set relativenumber!<CR>
nnoremap <key> :ls<CR>:b<Space>
vnoremap <Leader>n :<C-u>'<,'>s/^/\=printf('[%0*d] ', len(line("'>") - line("'<") + 1), line('.') - line("'<"))<CR>
vnoremap Q :norm @q<CR>
xnoremap <leader>p "+
xnoremap <leader>y "+y

if has("patch-8.1.0251")
  let myBackupDir = myConfigDir . '/backupDir'
  call system('mkdir -p ' . myBackupDir)
  let &backupdir = myBackupDir
end

if has('persistent_undo')
  let myUndoDir = myConfigDir . '/undoDir'
  call system('mkdir -p ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
endif

" latex-live-preview
let g:livepreview_previewer = 'zathura'

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_close = 0

" UltiSnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsEditSplit="vertical"
" let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsSnippetDirectories=["logograms"]
let g:UltiSnipsEnableSnipMate = 1

" vim-crunch
let g:crunch_result_type_append = 0

" vim-unicoder
let g:unicoder_command_abbreviations = 0 " Disable abbrevs in command and search lines
let g:unicoder_exclude_filetypes = ['tex', 'latex', 'plaintex']

" vimtex
" let g:vim_json_conceal = 0
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

runtime ftplugin/man.vim

" Toggle between full path and relative path of current file.
function! RestoreDeleteNextEmptyLineToRegisterQ()
  call setreg("q", "/^\s*$dd1k", ""v")
endfunction
command! RestoreDeleteNextEmptyLineToRegisterQ call RestoreDeleteNextEmptyLineToRegisterQ()

" Toggle between full path and relative path of current file.
function! ToggleStatusLine()
  let myStatusLine = &statusline
  if myStatusLine =~ "%t"
    let myStatusLine = substitute(myStatusLine, "%t", "%F", "g")
  elseif myStatusLine =~ "%F"
    let myStatusLine = substitute(myStatusLine, "%F", "%t", "g")
  endif
  let &statusline = myStatusLine
endfunction
command! ToggleStatusLine call ToggleStatusLine()

" Toggle between concise and data-rich statusline modes.
function! ToggleStatusLineMode()
  let myStatusLine = &statusline
  if myStatusLine =~ "%t"
    let myPathFormat = "%t"
  else
    let myPathFormat = "%F"
  endif
  if myStatusLine =~ "fugitive"
    let myStatusLine =
      \ "[%n] [" . myPathFormat . "]"
      \   . "%="
      \   . "[%l\/%L,\ %c%V]"
  else
    let myStatusLine =
      \ "[%n] [" . myPathFormat . "]"
      \   . "%h%m%r%y"
      \   . "%="
      \   . "%{fugitive#statusline()}"
      \   . "%#warningmsg#%{SyntasticStatuslineFlag()}"
      \   . "%*"
      \   . "[%l\/%L,\ %c%V]"
  endif
  let &statusline = myStatusLine
endfunction
command! ToggleStatusLineMode call ToggleStatusLineMode()

" Trim whitespace on save.
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e       " [e] flag suppresses error messages.
  call cursor(l, c) " Restore former cursor position.
endfunction

function! LogogramReplace(mode)
  let l:filepath = expand('${../logograms/logograms.json}')
  let l:command = printf('${pkgs.python311}/bin/python3.11 ${../logograms/logogram_replace.py} %s %s', a:mode, l:filepath)
  let l:original = join(getline(1, '$'), "\n")
  let l:processed = system(l:command, l:original)
  call setline(1, split(l:processed, "\n"))
endfunction
command! ToLogograms call LogogramReplace("to_logogram")
command! ToASCII call LogogramReplace("to_ascii")

let g:logogram_toggle = 0
function! ToggleLogogramState()
  if g:logogram_toggle
    call LogogramReplace("to_ascii")
    let g:logogram_toggle = 0
    echo "Switched to ASCII"
  else
    call LogogramReplace("to_logogram")
    let g:logogram_toggle = 1
    echo "Switched to Logograms"
  endif
endfunction
command! ToggleLogograms call ToggleLogogramState()

augroup vimrc
  " Remove all vimrc autocommands so not to enter twice.
  autocmd!
  autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
augroup END
''
