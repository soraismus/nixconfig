" vim-utils.nix sets 'filetype indent plugin on | syn on'.
syntax enable " Equivalent to ':source $VIMRUNTIME/syntax/syntax.vim'

let mapleader = ","

let myConfigDir = expand('$VOLATILE_CONFIG/$USER/vim')

" The prefix 'w:' indicates a window-specific variable.
let w:counter = 0

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set breakindent
set colorcolumn=80,115
set complete=.,w,b,u,t
" `&directory` is the list of dir names for swap files.
" The default value of `&directory` is '.,~/tmp,/var/tmp,/tmp'.
" A double slash ensures swapfile-name uniqueness.
set directory=/var/tmp//,/tmp//
set display=truncate,uhex
set encoding=utf-8
set expandtab
set foldclose=all
set foldopen=hor,undo
set formatoptions=tcqj
set hidden
set history=1000
set hlsearch
set laststatus=2
set lazyredraw
set linebreak
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set matchpairs=(:),[:],{:},<:>
set modeline
set mouse=
set nocompatible
set nocursorcolumn
set nocursorline
set noincsearch
set nojoinspaces
set novisualbell
set nrformats=bin,hex
set number
set relativenumber
set ruler
set scrolloff=0
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal
set shiftround
set shiftwidth=2
set showbreak=â†ª
set showmatch
set sidescrolloff=0
set smarttab
set statusline=[%n]\ [%f]
  set statusline+=%h%m%r%y
  set statusline+=%=            " separation point btw left- and right-aligned
  set statusline+=%{fugitive#statusline()}
  set statusline+=%#warningmsg# " Set highlight group 'warningmsg'.
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*            " Restore highlight group User{N}.
  set statusline+=[%l\/%L,\ %c%V]
set swapfile
set t_Co=16
set tabpagemax=50
set tabstop=2
set ttimeout
set ttimeoutlen=100
set viminfo=!,'100,<50,s10,h
let &viminfofile = myConfigDir . '.info'
set virtualedit=all
set wildmenu
set wrap

setglobal tags=./tags

nmap = <Plug>VinegarSplitUp
" The pipe character must be escaped.
nmap \| <Plug>VinegarVerticalSplitUp

 noremap <C-H> <C-W>h
 noremap <C-J> <C-W>j
 noremap <C-K> <C-W>k
 noremap <C-L> <C-W>l
cnoremap w!! %!sudo tee > /dev/null %
inoremap <C-A> <Esc>I
inoremap <C-E> <Esc>A
inoremap jk <Esc>
inoremap kj <Esc>
inoremap <expr> <C-C> UtilityListCurrentCounter()
inoremap <expr> <C-N> UtilityListNextCounter()
inoremap <expr> <C-P> UtilityListPreviousCounter()
inoremap <expr> <C-R> UtilityListResetCounter()
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
nnoremap Q @q
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
nnoremap ## :set relativenumber!<CR>
vnoremap Q :norm @q<CR>

if has('persistent_undo')
  let myUndoDir = myConfigDir . '/undoDir'
  call system('mkdir -p ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
endif

" Recommended Syntastic settings
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_close = 0

" Per !gh/kuniwak/vint
let g:syntastic_vim_checkers = ['vint']

" Toggle between full path and relative path of current file.
function! ToggleStatusLine()
  let myStatusLine = &statusline
  if myStatusLine =~ "%f"
    let myStatusLine = substitute(myStatusLine, "%f", "%F", "g")
  elseif myStatusLine =~ "%F"
    let myStatusLine = substitute(myStatusLine, "%F", "%f", "g")
  endif
  let &statusline = myStatusLine
endfunction
command! ToggleStatusLine call ToggleStatusLine()

" Toggle between concise and data-rich statusline modes.
function! ToggleStatusLineMode()
  let myStatusLine = &statusline
  if myStatusLine =~ "%f"
    let myPathFormat = "%f"
  else
    let myPathFormat = "%F"
  endif
  if myStatusLine =~ "fugitive"
    let myStatusLine =
      \ "[%n] [" . myPathFormat . "]"
      \   . "%="
      \   . "[%l\/%L,\ %c%V]"
  else
    let myStatusLine =
      \ "[%n] [" . myPathFormat . "]"
      \   . "%h%m%r%y"
      \   . "%="
      \   . "%{fugitive#statusline()}"
      \   . "%#warningmsg#%{SyntasticStatuslineFlag()}"
      \   . "%*"
      \   . "[%l\/%L,\ %c%V]"
  endif
  let &statusline = myStatusLine
endfunction
command! ToggleStatusLineMode call ToggleStatusLineMode()

function! UtilityListCurrentCounter()
  return w:counter
endfunction

function! UtilityListNextCounter()
  let w:counter += 1
  return w:counter
endfunction

function! UtilityListPreviousCounter()
  let w:counter -= 1
  return w:counter
endfunction

function! UtilityListResetCounter()
  let w:counter = 0
  return ''
endfunction

" Trim whitespace on save.
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e       " [e] flag suppresses error messages.
  call cursor(l, c) " Restore former cursor position.
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
