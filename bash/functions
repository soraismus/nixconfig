back () {
  for i in `seq 1 $1`; do
    cd ..
  done
}

# Determine the path/filename corresponding to the ith ("$2") entry under the tag "$1".
bmget () {
  local searchterm=*"$1"*
  # The backslash escapes aliases.
  # See https://stackoverflow.com/questions/6162903/why-do-backslashes-prevent-alias-expansion.
  local filename="$(
      \ls -l $TAGPATH/$searchterm
        | awk '!/total/ {print $11}' \
        | awk -v fileIndex="$2"      \
            'BEGIN { count = 0 } {count++; if (count == fileIndex) print}'
    )"
  echo "$filename"
}

# List all category tags that match an argument.
bmgrep () {
  local searchterm="*$1*"

  # Process 1 is piped to process 2.
  find "$TAGPATH" -type d -name "$searchterm" \
    | awk 'BEGIN {FS="/"} {print $NF}'

  # Note about process 1:
  # Find directories in "$TAGPATH' with names
  # that partially match "$searchterm".

  # Note about process 2:
  # Print only the last '/'-delimited field of each match.
  # That is, print only the name of the bottom-most directory.
  # (The value of "$NF" in awk is the number of fields in a record;
  # in this context, "$NF" refers to the last field.)
}

# List all entries under the tag "$1".
bmlist () {
  local searchterm=*"$1"*
  # The backslash escapes aliases.
  \ls -l $TAGPATH/$searchterm    \
    | awk '!/total/ {print $11}' \
    | awk -F'/' 'BEGIN { count = 0 } {count++; printf "%-4s %s\n", count, $NF}'
}

# List all entries under the tag "$1".
bmlistTitles () {
  local searchterm=*"$1"*
  # The backslash escapes aliases.
  \ls -l $TAGPATH/$searchterm    \
    | awk '!/total/ {print $11}' \
    | sed 's/^.*~\(.*\)\.md/\1/' \
    | awk -F'/' 'BEGIN { count = 0 } {count++; printf "%-4s %s\n", count, $NF}'
}

# Open in vim the ith ("$2") entry under the tag "$1".
bmvim () {
  local filename="$( bmget "$1" "$2" )"
  vim "$filename"
}

connectWifi () {
  local ssid="$1"
  local pw="$2"
  nmcli device wifi connect "$ssid" password "$pw"
}

countDirItems () {
  local directory
  if [[ "$#" -gt 0 ]]; then
    directory="$1"
  else
    directory="$PWD"
  fi
  # `ls -1` # Lists one file per line.
  # `ls -U` # Lists files in directory order (i.e., without sorting).
  # `wc -l` # Counts the number of newline characters.
  # `wc -m` # Counts the number of characters.
  # `wc -w` # Counts the number of words.
  # (The backslash escapes aliases.)
  echo "$( \ls -1U "$directory" | wc -l )"
}

derefMark () {
  # Because '$MARKPATH/$1' is a symlink, the 11th field of
  # `ls -l "$MARKPATH/$1"` is the actual direct path.
  # The backslash escapes aliases.
  echo "$( \ls -l "$MARKPATH/$1" 2>/dev/null | awk '{print $11}' )"
}

# https://gist.github.com/jan-warchol/89f5a748f7e8a2c9e91c9bc1b358d3ec
_disposeHistoryOrphans () {
  # The following cmd lists all shell PIDs.
  #   `--pid $$` -- Only list processes matching the PID of the current shell.
  #   `--format comm=` instructs 'ps' to return the process's name only.
  #   'pgrep' lists all PIDs corresponding the given executable name.
  local active_shells="$( pgrep "$( ps --pid $$ --format comm=)" )"

  local grep_pattern="$(
      for pid in ${active_shells}; do
        echo -n "-e \.${pid}\$ ";
      done
    )"

  # `grep -v` inverts matching.
  # The backslash escapes aliases.
  local orphaned_files="$(
      \ls ${HISTFILE}.[0-9]* 2> /dev/null \
        | grep -v ${grep_pattern}
    )"

  if [ -n "$orphaned_files" ]; then
    printf "Merging orphaned history files:\n"
    for f in ${orphaned_files}; do
      printf "  $( basename ${f} )"
      \cat ${f} >> $HISTFILE
      \rm ${f} # The backslash escapes aliases.
    done
    printf "\ndone\n"
  fi
}

ducks () {
  du -cks "$1" | sort -rn | head -11
}

# `echo` can have unspecified behavior.
# Source: https://www.etalabs.net/sh_tricks.html
echo () {
  printf %s\\n "$*"
}

echoError () {
  # Make file descriptor 1 also point to file descriptor 2.
  >&2 echo "Error: $1"
}

# Request ids of gdrive records for folders with the specified name.
gdrive_find_folder_ids_for_name () {
  local query="name = '$1' and mimeType = 'application/vnd.google-apps.folder'"
  # 'NR!=1'      # Apply to all rows except 1st row.
  # '{print $1}' # Print 1st field, which is the record's id.
  gdrive list --query "$query" | awk 'NR!=1{print $1}'
}

# Request gdrive records for all folders.
# As of gdrive's API of 2019 January 29,
# the following fields will be included in the record:
# Id, Name, Type, Size, Created
gdrive_list_folders () {
  gdrive list --query "mimeType = 'application/vnd.google-apps.folder'"
}

githostclone () {
  local githost
  local owner
  local repo
  local dir
  if [[ "$#" -eq 4 ]]; then
    githost="$1"
    owner="$2"
    repo="$3"
    dir="$4/${owner}/${repo}"
  elif [[ "$#" -eq 3 ]]; then
    githost="$1"
    owner="$2"
    repo="$3"
    dir="${owner}/${repo}"
  elif [[ "$#" -eq 2 ]]; then
    githost="$1"
    owner="$( basename "$PWD" )"
    repo="$2"
    dir="${repo}"
  else
    echoError 'Incorrect number of arguments'
    return 1
  fi
  if [ -d "${dir}" ]; then
    echoError "The directory (${dir}) already exists."
    return 2
  else
    git clone "https://${githost}/${owner}/${repo}.git" "${dir}"
  fi
}

ghclone () {
  githostclone "github.com" "$@"
}

gitlabclone () {
  githostclone "gitlab.com" "$@"
}

grepNormalize () {
  echo "\(^\|\s\+\)$1\(\s\+\|$\)"
}

# Use `fzf` to search through the command history.
hist () {
  # --tac: Reverse the order of the input.
  # --no-sort: Leave the list of matching results unsorted.
  history | fzf --tac --no-sort
}

# Return the index number (inode) of the provided file.
# (Dependency of 'namespaces/tag')
# (Cf. namespaces/note get-file-id)
inode () {
  [ -z "$1" ] && { echoError 'This function requires an argument'; return 1; }
  local file_id
  # The '-d' flag of '[' determines whether the file is a directory.
  # The '-d' flag of 'ls' lists directory entries rather than directory contents.
  # The '-i' flag prints the inode number for each file.
  # The '-L' flag dereferences symbolic links.
  if [ -d "$1" ]; then
    file_id="$( ls -diL "$1" | awk '{print $1}' )"
  else
    file_id="$( ls -iL "$1" | awk '{print $1}' )"
  fi
  echo "$file_id"
}


isMark () {
  if [ "$( listMarks | grep "$( grepNormalize "$1" )" -c )" -gt 0 ]; then
    return 0
  else
    return 1
  fi
}

listCapsuleComponents () {
  local capsuleRoot
  local capsuleSource="../stages/6.json"
  if [ "$#" -eq 0 ]; then
    echo "A capsule root must be provided."
    return 1
  elif [ "$#" -eq 1 ]; then
    capsuleRoot="${1}"
  else
    capsuleRoot="${1}"
    capsuleSource="${2}"
  fi
  reduce \
      -p "${capsuleSource}" \
      -g id \
      -w "<< ${capsuleRoot}" \
      --keys-only \
      --capsule "${capsuleRoot}" \
    | jq -r '.[] | sort[]'
}

listMarks () {
  if [ ! -e "$MARKPATH" ]; then
    echo "Creating directory at (" "$MARKPATH" ")."
    mkdir -p "$MARKPATH"
  fi
  # The backslash escapes aliases.
  for name in "$( \ls "$MARKPATH" )"; do
    echo "$name"
  done
}

listRecentFiles () {
  # List first four files.
  # -F --> with indicator suffixes (*/=>@|)
  # -t --> sorted by modification time
  # -1 --> one per line
  # Then transform each newline to a space.
  # (The backslash escapes aliases.)
  \ls -Ft1         2> /dev/null  \
    | head -4      2> /dev/null  \
    | tr "\\n" " " 2> /dev/null
  printf "\n"
}

list-tubes () {
  reduce -p ../stages/6.json -g material.type -w '~ steeltube' -s id --unique | jq -r '. | map(values | .[][][])[]'
}

listWifi () {
  nmcli device wifi list
}

lsmark () {
  local path
  if [ -z "$1" ]; then
    path='.'
  else
    path="${1}"
  fi
  local initial_segment="${1%%/*}"
  if isMark "${initial_segment}"; then
    ls "${MARKPATH}/${path}"
  else
    ls "${path}"
  fi
}

mark () {
  NAMESPACE=mark execute-namespace "$@"
}

mcd () {
  mkdir -p "$1"
  cd "$1"
}

# https://gist.github.com/jan-warchol/89f5a748f7e8a2c9e91c9bc1b358d3ec
_mergeShellHistory () {
  # `$$` represents the PID of the current shell.
  # By convention, "${HISTFILE}.$$" is the current shell's hist file.
  local shell_histfile="${HISTFILE}.$$"

  # `-es` puts vim in ex mode and silent mode.
  # Without `redir >> /dev/stdout`, ex-vim doesn't redirect to stdout.
  # 'ex' has a special command ('undofile') that displays
  # what the undofile corresponding to the input would be.
  # Finally, `-c 'q'` instructs ex-mode vim to quit.
  # (It might be possible to use the flag '-q' instead of this last command.)
  # (Note that, for bash variable expansion of `${shell_histfile}` to occur
  # inside a vim-recognized string, a pair of of single-quotes must be
  # interior to a pair of double-quotes.)
  local shell_undofile="$(
      vim                                       \
        -es                                     \
        -c "redir >> /dev/stdout"               \
        -c "echo undofile('${shell_histfile}')" \
        -c "q"
    )"


  if [ -e "${shell_histfile}" ]; then
    if [ -e "${HISTFILE}" ]; then
      \cat "${shell_histfile}" >> "${HISTFILE}"
    fi

    \rm "${shell_histfile}" # The backslash escapes aliases.
  fi

  if [ -e "${shell_undofile}" ]; then
    \rm "${shell_undofile}"
  fi
}

note () {
  NAMESPACE=note execute-namespace "$@"
}

peek () {
  tmux split-window -p 33 "$EDITOR" "$@" || exit;
}

prepare-s14 () {
  local directory
  local defaultDirectory="../quote-notes"
  if [ "${#}" -lt 1 ]; then
    if [ ! -d "${defaultDirectory}" ]; then
      1>&2 echo "The directory '${defaultDirectory}' does not exist."
      return 1
    else
      directory="${defaultDirectory}"
    fi
  elif [ ! -d "${1}" ]; then
    1>&2 echo "The directory '${1}' does not exist."
    return 2
  else
    directory="${1}"
  fi
  cp /home/polytope/eb-templates/quote-notes.template.json "${directory}/0.json"
}

print-eb () {
  local printer="konica-minolta-654e"
  for file in "${@}"; do
    local ext="${file##*.}"
    if [ "${ext}x" -eq "xlsxx" ]; do
      soffice -pt "${printer}" "${file}"
    elif [ "${ext}x" -eq "pdfx" ]; do
      lp -d "${printer}" "${file}"
    fi
  done
}

s8 () {
  if [ "${#}" -lt 1 ] || [ "${#}" -gt 2 ]; then
    1>&2 echo "'s8' requires a local filepath."
    return 1
  elif [ "${1}" != "-o" ]; then
    1>&2 echo "The -o option must be set."
    return 2
  else
    local output="${2}"
    local temporaryOutput="__temp.$(timestamp)"
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --override > "${temporaryOutput}"
    mv "${temporaryOutput}" "${output}"
  fi
}

sall () {
  if [ "${#}" -lt 1 ]; then
    estimate --ignore-pr -o ../orders/0 --stage 0 -m > ../stages/0.json
    estimate --ignore-pr -o ../orders/0 --start 0 ../stages/0.json --stage 1 -m > ../stages/1.json
    estimate --ignore-pr -o ../orders/0 --start 1 ../stages/1.json -x -m > ../stages/6.json
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -f -m > ../overrides/0.yaml
  else
    local client="${1}"
    if [ "${client}x" = "--empirex" ]; then
      estimate --ignore-pr -o ../orders/0 --stage 0 --empire > ../stages/0.json
      estimate --ignore-pr -o ../orders/0 --start 0 ../stages/0.json --stage 1 --empire > ../stages/1.json
      estimate --ignore-pr -o ../orders/0 --start 1 ../stages/1.json -x --empire > ../stages/6.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -f --empire > ../overrides/0.yaml
    elif [ "${client}x" = "--ppgx" ]; then
      estimate --ignore-pr -o ../orders/0 --stage 0 --ppg > ../stages/0.json
      estimate --ignore-pr -o ../orders/0 --start 0 ../stages/0.json --stage 1 --ppg > ../stages/1.json
      estimate --ignore-pr -o ../orders/0 --start 1 ../stages/1.json -x --ppg > ../stages/6.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -f --ppg > ../overrides/0.yaml
    elif [ "${client}x" = "--sencox" ]; then
      estimate --ignore-pr -o ../orders/0 --stage 0 --senco > ../stages/0.json
      estimate --ignore-pr -o ../orders/0 --start 0 ../stages/0.json --stage 1 --senco > ../stages/1.json
      estimate --ignore-pr -o ../orders/0 --start 1 ../stages/1.json -x --senco > ../stages/6.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -f --senco > ../overrides/0.yaml
    else
      estimate --ignore-pr -o ../orders/0 --stage 0 -c "${client}" > ../stages/0.json
      estimate --ignore-pr -o ../orders/0 --start 0 ../stages/0.json --stage 1 -c "${client}" > ../stages/1.json
      estimate --ignore-pr -o ../orders/0 --start 1 ../stages/1.json -x -c "${client}" > ../stages/6.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -f -c "${client}" > ../overrides/0.yaml
    fi
  fi
}

sall2 () {
  if [ "${#}" -lt 1 ]; then
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm-data -m > ../stages/10.json
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm -m -- -o ../vcms
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --ast -m > ../stages/12.json
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --summary -m > ../stages/13.json
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote-spec ../quote-notes/0.json -m > ../stages/14.json
    estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote ../quote-notes/0.json -m -- -o ../quotes/0.pdf
  else
    local client="${1}"
    if [ "${client}x" = "--empirex" ]; then
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm-data --empire > ../stages/10.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm --empire -- -o ../vcms
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --ast --empire > ../stages/12.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --summary --empire > ../stages/13.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote-spec ../quote-notes/0.json --empire > ../stages/14.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote ../quote-notes/0.json --empire -- -o ../quotes/0.pdf
    elif [ "${client}x" = "--ppgx" ]; then
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm-data --ppg > ../stages/10.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm --ppg -- -o ../vcms
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --ast --ppg > ../stages/12.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --summary --ppg > ../stages/13.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote-spec ../quote-notes/0.json --ppg > ../stages/14.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote ../quote-notes/0.json --ppg -- -o ../quotes/0.pdf
    elif [ "${client}x" = "--sencox" ]; then
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm-data --senco > ../stages/10.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --vcm --senco -- -o ../vcms
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --ast --senco > ../stages/12.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --summary --senco > ../stages/13.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote-spec ../quote-notes/0.json --senco > ../stages/14.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --quote ../quote-notes/0.json --senco -- -o ../quotes/0.pdf
    else
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --vcm-data -c "${client}" > ../stages/10.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --vcm -c "${client}" -- -o ../vcms
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --ast -c "${client}" > ../stages/12.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --summary -c "${client}" > ../stages/13.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --quote-spec ../quote-notes/0.json -c "${client}" > ../stages/14.json
      estimate --ignore-pr -o ../orders/0 --start 6 ../stages/6.json -w ../overrides/0.yaml --include-graphics --quote ../quote-notes/0.json -c "${client}" -- -o ../quotes/0.pdf
    fi
  fi
}

tag () {
  NAMESPACE=tag execute-namespace "$@"
}

timestamp () {
  date +'%Y.%m.%d.%H.%M.%S'
}

# TODO: DEBUG: `to git` in a directory with a '.git' directory
#              changes to the '.git' directory. Why?
# Go to the directory to which the provided bookmark links.
to () {
  [ -z "$1" ] && { echoError 'This function requires an argument'; return 1; }
  local path="${1}"
  local initial_segment="${1%%/*}"
  if isMark "${initial_segment}"; then
    CDPATH="$MARKPATH" cd -P "${path}" &> /dev/null
  else
    cd "${path}"
  fi
}

# Activate/deactivate the touchpad.
toggleTouchpad () {
  # See `xinput list` to check device IDs.
  local prop="Device Enabled"

  local touchpad_device="$(
      xinput list          \
        | grep -i touchpad \
        | sed 's/.*id=\([0-9]*\).*/\1/'
    )"

  if [ -z "$touchpad_device" ]; then
    echoError "The touchpad device ID could not be determined."
    return 2
  fi

  # https://unix.stackexchange.com/questions/151654/
  # Bash treats a regexp in quotes as a literal string.
  if ! [[ "${touchpad_device}" =~ ^[0-9]+$ ]]; then
    echoError "The touchpad device ID is not a number."
    return 3
  fi

  # Default delimiter for `touch` is \t.
  # The third field should be either 0 or 1.
  local setting="$(
      xinput list-props "${touchpad_device}" \
        | grep "${prop}"                     \
        | cut -f3
    )"

  local newSetting
  if [ "${setting}" -eq 0 ]; then
    newSetting=1
  elif [ "${setting}" -eq 1 ]; then
    newSetting=0
  fi

  xinput set-prop "${touchpad_device}" "${prop}" "${newSetting}"
}

_trackPath () {
  # Record the current working directory.
  pwd > "${CONFIG_ROOT}/.lastdir"
  local countLimit="30"
  [ "$LASTDIR" != "$PWD" ]                               \
    && [ "$( countDirItems "$PWD" )" -lt "$countLimit" ] \
    && listRecentFiles
  export LASTDIR="$PWD"
}

# Go to the location, and rename the tmux window.
tmuxto () {
  [ -z "$1" ] && { echoError 'This function requires an argument'; return 1; }
  to "$1"
  tmux rename-window "$1"
}

# Rename a file so that spaces become underscores.
underscore-file-name () {
  local filename="${1}"
  mv "${filename}" "$( echo "${filename}" | tr ' ' '_' )"
}

# https://gist.github.com/jan-warchol/89f5a748f7e8a2c9e91c9bc1b358d3ec
#https://metaredux.com/posts/2020/07/07/supercharge-your-bash-history.html
_updateHistory () {
  history -a
  history -n
  # # `$$` represents the PID of the current shell.
  # # By convention, "${HISTFILE}.$$" is the current shell's hist file.
  # local shell_histfile="${HISTFILE}.$$"
  # # Create a new history file for the current shell,
  # # and append hist lines to it.
  # history -a "${shell_histfile}"
  # history -c # Clear the history list.
  # history -r # Load common $HISTFILE and append contents to the history list.
  # # Load other shells' history files.
  # # (`grep -v` inverts the match.)
  # # (The backslash escapes aliases.)
  # for f in "$(
  #     \ls ${HISTFILE}.[0-9]* 2> /dev/null \
  #       | grep -v "${shell_histfile}\$" 2> /dev/null
  #   )"
  # do history -r "$f"
  # done
  # history -r "${shell_histfile}" # Load the current shell's history file.
}

# Search for the path of a file matching the name provided; open it with vim.
vff () {
  local file_name="*$1*"
  vim "$(find . -name "$file_name")"
}

# Examples:
# `workspace     spago gh/matthew-hilty/spago`
# `workspace new spago gh/matthew-hilty/spago`
workspace () {
  local window_name
  local path
  if [ "$#" -lt 2 ]; then
    echoError 'Incorrect number of arguments'
    return 1
  elif [ "$#" -eq 2 ]; then
    window_name="$1"
    path="$2"
    # The following doesn't work as I'd expect.
    tmux rename-window "$window_name"
  else
    window_name="$2"
    path="$3"
    tmux new-window -n "$window_name"
  fi
  to "$path"
  tmux split-window -h
  to "$path"
}

youtube-dl-ids () {
  echo "Preparing to download youtube videos corresponding to the following IDs:"
  local id_array=("$@")
  echo "  --  " "${id_array[@]}"
  local catalogDir="${HOME}/Downloads/videos/catalog"
  local catalog="${catalogDir}/catalog"
  if [ ! -d "${catalogDir}" ]; then
    echo "making directory " "${catalogDir}"
    mkdir -p "${catalogDir}"
  fi
  for i in "${id_array[@]}"; do
    local url="https://www.youtube.com/watch?v=${i} "
    echo "  ------------------------------------ "
    if youtube-dl "${url}" -o "$HOME/Downloads/videos/${i}-%(title)s.%(ext)s"
      then echo "${url}" "$( date )" >> "${catalog}";
      else echo "ERROR -- " "${url}" "$( date )" >> "${catalog}";
    fi
  done
}

zpdf-overrides () {
  local overridesFile="${1}"
  if [ -f "${overridesFile}" ]; then
    if [ "${#}x" = "2x" ]; then
      local startItem="${2}"
      declare -a files=()
      for i in $( awk "/^${startItem}/,EOF" "${overridesFile}" | grep '^[A-Z]' | tr -d ':' ); do
        files+=("${i}.pdf")
      done
      /home/polytope/eb-bin/zopen "${files[@]}"
    else
      declare -a files=()
      for i in $( cat "${overridesFile}" | grep '^[A-Z]' | tr -d ':' ); do
        files+=("${i}.pdf")
      done
      /home/polytope/eb-bin/zopen "${files[@]}"
    fi
  else
    2>1 echo "The overrides file '${overridesFile}' does not exist."
    return 1
  fi
}

zpdf-tubes () {
  /home/polytope/eb-bin/zopen "$( list-tubes )"
}
