help () {
  awk '/\(\) {/ {print $1}' "$NAMESPACES/$NAMESPACE"
}

# This command requires two arguments: 1) a filename; 2) a tagname.
# "$#" signifies the number of arguments given to this command.
set () {
  if [[ $# == 0 || $# == 1 ]]; then
    >&2 echo "  This script requires two arguments: filename, tagname"
    exit 1;
  fi

  if [ -z "$TAGPATH" ]; then
    >&2 echo "  The variable TAGPATH has not been set."
    exit 2;
  fi

  if [ -z "$TAGSOURCES" ]; then
    >&2 echo "  The variable TAGSOURCES has not been set."
    exit 3;
  fi

  if [ ! -e "$TAGPATH" ]; then
    echo "Creating directory at (" "$TAGPATH" ")."
    mkdir -p "$TAGPATH"
  fi

  # -i: print the file's index number (inode).
  # -L: dereference.
  # -d: list directory entries instead of contents.
  # set `ref` to the inode from the pair [inode, filename].
  local ref="$( ls -iLd "$1" | awk '{print $1}' )"
  local path="$( readlink -fn "$1" )"

  # If it doesn't already exist, create a new
  # subdirectory $2 under $TAGPATH.
  if [ ! -d "$TAGPATH/$2" ]; then
    mkdir -p "$TAGPATH/$2"
  fi

  # If there isn't already a file called $ref in $TAGPATH/$2,
  # then create a softlink under that name to the file
  # in the current working directory with the name $1.
  if [ ! -f "$TAGPATH/$2/$ref" ]; then
    ln -s "$1" "$TAGPATH/$2/$ref"
    echo "$ref -> $path" >> "$TAGSOURCES"
    echo "  '$1' has been tagged with '$2'"
  elif [ "$ref" = "$(inode "$TAGPATH/$2/$ref")" ]; then
    >&2 echo "  '$1' has already been tagged with '$2'"
    exit 4;
  else
    >&2 echo "  Tagspace collision"
    exit 5;
  fi
}

# Echoing the output of `ls "$TAGPATH" lists the
# names of all tags currently provided.
all () {
  if [ -z "$TAGPATH" ]; then
    >&2 echo "  The variable TAGPATH has not been set."
    exit 2;
  fi
  if [ ! -e "$TAGPATH" ]; then
    echo "Creating directory at (" "$TAGPATH" ")."
    mkdir -p "$TAGPATH"
  fi
  echo "$( ls "$TAGPATH" )"
}

# This command requires an argument: the name of a tag.
delete () {
  if [[ $# == 0 ]]; then
    >&2 echo '  This file requires an argument (tagname)'
    exit 1;
  elif [ -z "$TAGPATH" ]; then
    >&2 echo "  The variable TAGPATH has not been set."
    exit 2;
  else
    if [ ! -e "$TAGPATH" ]; then
      echo "Creating directory at (" "$TAGPATH" ")."
      mkdir -p "$TAGPATH"
    fi

    # The semicolon indicates the end of the argument list for 'echo'.
    # The backslash escapes the semicolon to prevent shell expansion.

    # The next two lines still require explication.
    local all_files="$( find "$TAGPATH/$1" -maxdepth 1 -exec echo \; | wc -l )"
    local num_items="$( echo "$all_files" - 1 | bc -l )"

    printf "\nThis tag currently applies to $num_items items."
    echo "Do you wish to continue? (y/n)"

    read response

    if [[ "$response" == 'y' ]]; then
      rm -rf "$TAGPATH/$1"
      echo "The tag '$1' has been deleted."
    else
      echo "Task aborted."
    fi
  fi
}

list () {
  if [[ $# == 0 ]]; then
    >&2 echo "  An argument (tagname) is required."
    exit 1;
  elif [ -z "$TAGPATH" ]; then
    >&2 echo "  The variable TAGPATH has not been set."
    exit 2;
  elif [ -z "$TAGSOURCES" ]; then
    >&2 echo "  The variable TAGSOURCES has not been set."
    exit 3;
  else
    if [ ! -e "$TAGPATH" ]; then
      echo "Creating directory at (" "$TAGPATH" ")."
      mkdir -p "$TAGPATH"
    fi

    # # -l: long-listing format.
    # # '!/total/ still requires explication.
    # # -F: The field-separator is '/'.
    # # $NF: the total number of fields in the input record.
    # # List all entries using the format: filename -> full-filepath
    # echo "$(ls -l "$TAGPATH/$1"   | \
    #   awk '!/total/ {print $11}'  | \
    #   awk -F'/' '{printf("%-10s  ->  %s\n", $NF, $0)}' )"

    for i in "$( ls "$TAGPATH/$1" )"; do
      grep "$i" "$TAGSOURCES"
    done
  fi
}

unset () {
  if [[ $# == 0 || $# == 1 ]]; then
    >&2 echo "  This script requires one of two patterns:"
    >&2 echo "  1) filename tagname"
    >&2 echo "  2) --all filename"
    exit 1;
  fi

  if [ -z "$TAGPATH" ]; then
    >&2 echo "  The variable TAGPATH has not been set."
    exit 2;
  fi

  if [ ! -e "$TAGPATH" ]; then
    echo "Creating directory at (" "$TAGPATH" ")."
    mkdir -p "$TAGPATH"
  fi

  if [[ "$1" = --all ]]; then
    local ref="$( ls -iLd "$2" | awk '{print $1}' )"
    find "$TAGPATH" -name "$ref" -delete
    echo "  All tags for '$2' have been deleted"
  else
    local ref="$( ls -iLd "$1" | awk '{print $1}' )"
    rm "$TAGPATH/$2/$ref"
    echo " The tag '$2' no longer applies to '$1'"
  fi
}
